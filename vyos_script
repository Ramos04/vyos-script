#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} [-hvfsn] [-a] [-o[file]] 
#%
#% DESCRIPTION
#%    static_ip is used for setting up a static ip mapping, nat rules, 
#%    and firewall rules. You need to specify the following items
#%
#%    template created by Michel VONGVILAY (https://www.uxora.com).
#%
#%
#% OPTIONS
#%    -h, --help                    print this help
#%    -V, --version                 print script information
#%    -D, --debug                   print all debug info to screen
#%    -h, --help                    show this help page
#%
#%    -a, --all                     run all modules 
#%    -f, --firewall                run firewall module
#%    -s, --static-map              run the dhcp static mapping module
#%    -n, --nat-translation         run the nat translation module
#%
#%    -d, --dry-run                 instead of running it prints all commands
#%    -o, --output                  write rules to file, default vyos_commands
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} -a --dry-run
#%    ${SCRIPT_NAME} -fsno ./vyos_commands
#%    ${SCRIPT_NAME} -fsn
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 0.0.1
#-    author          Vincent Ramos (https://github.com/Ramos04)
#-    license         N/A
#================================================================
#  HISTORY
#     2020/09/15 : Ramos04 : Started the script
# 
#================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================

#╔═════════════════════════════════════════════════════════════════════════════╗
#║                               GLOBAL VARS                                   ║
#╚═════════════════════════════════════════════════════════════════════════════╝
  #╔═══════════════════╗
  #║     COLOR VARS    ║
  #╚═══════════════════╝

readonly none=$'\e[0m'
readonly black=$'\e[0;30m'
readonly red=$'\e[0;31m'
readonly green=$'\e[0;32m'
readonly yellow=$'\e[0;33m'
readonly blue=$'\e[0;34m'
readonly purple=$'\e[0;35m'
readonly cyan=$'\e[0;36m'

readonly bblack=$'\e[1;30m'
readonly bred=$'\e[1;31m'
readonly bgreen=$'\e[1;32m'
readonly byellow=$'\e[1;33m'
readonly bblue=$'\e[1;34m'
readonly bpurple=$'\e[1;35m'
readonly bcyan=$'\e[1;36m'

  #╔═══════════════════╗
  #║    SCRIPT VARS    ║
  #╚═══════════════════╝
readonly SCRIPT_VERSION="0.0.1"
readonly SCRIPT_NAME_EXT="$(basename ${0})"                 # scriptname without path
readonly SCRIPT_NAME="${SCRIPT_NAME_EXT%.*}"                # scriptname without .sh
readonly SCRIPT_DIR="$( cd $(dirname "$0") && pwd )"        # Script Directory
readonly SCRIPT_ROOT="${SCRIPT_DIR%/*}"	                    # Add a /* depending on script depth
readonly SCRIPT_FULLPATH="${SCRIPT_DIR}/${SCRIPT_NAME}"     # Full path of the script
readonly SCRIPT_HOSTNAME="$(hostname)"                      # Hostname
readonly SCRIPT_COMMAND_FULL="${0} $*"                      # Full command
readonly SCRIPT_EXEC_ID=${$}                                # Exec ID
readonly SCRIPT_HEADSIZE=$(grep -sn "^# END_OF_HEADER" ${0} | head -1 | cut -f1 -d:)

  #╔═══════════════════╗
  #║    MODULE VARS    ║
  #╚═══════════════════╝
MOD_DBG=1
MOD_OUT=0
MOD_DRY=1
MOD_FW=1
MOD_STAT=1
MOD_NAT=1
MOD_EX=0

FILE_OUT="./vyos_commands"

  #╔═══════════════════╗
  #║     RULE VARS     ║
  #╚═══════════════════╝
RULE_NUM=""             # rule number to be used for nat and fw
RULE_DESC=""            # rule description

  #╔═══════════════════╗
  #║     ADDR VARS     ║
  #╚═══════════════════╝
ADDR_IP=""              # internal host ip address
ADDR_MAC=""             # internal host mac address

  #╔══════════════════╗
  #║    PORT VARS     ║
  #╚══════════════════╝
PORT_DEST=""            # port that traffic is entering fw from
PORT_TRANS=""           # port that is used to send to internal host

  #╔═══════════════════╗
  #║    PROTO VARS     ║
  #╚═══════════════════╝
PROTOCOL=""             # protocol 


  #╔═══════════════════╗
  #║   STATIC VARS     ║
  #╚═══════════════════╝
STATMAP_NET_NAME=""     # static mapping network name
STATMAP_SUB_NAME=""   # static mapping network subnet
STATMAP_MAP_NAME=""     # static mapping name

  #╔══════════════════╗
  #║     NAT VARS     ║
  #╚══════════════════╝
NAT_IFACE=""            # nat interface

  #╔══════════════════╗
  #║     FW VARS      ║
  #╚══════════════════╝
FW_NAME=""              # firewall name 

#╔═════════════════════════════════════════════════════════════════════════════╗
#║                                FUNCTIONS                                    ║
#╚═════════════════════════════════════════════════════════════════════════════╝

#= DESC: Displays script information
# called like usage ful

function script_man {
    headFilter="^#[%+]"
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "${headFilter}" | \
        sed -e "s/${headFilter}//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";
}

function script_usage {
    headFilter="^#+"
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "${headFilter}" | \
        sed -e "s/${headFilter}//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";
}

function script_version () {
    headFilter="^#-"
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "${headFilter}" | \
        sed -e "s/${headFilter}//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";
}


function module_print_flags {
     echo MODULE FLAGS
     echo ======================
     echo MOD_DBG  : $MOD_DBG
     echo MOD_DRY  : $MOD_DRY
     echo MOD_FW   : $MOD_FW
     echo MOD_STAT : $MOD_STAT
     echo MOD_NAT  : $MOD_NAT
}

function print_warning {
  echo -e "${red}
╔══════════════════════════════════════════════════════════════════════════════╗
║                             FOREWARD/WARNING                                 ║
║══════════════════════════════════════════════════════════════════════════════║
║    currently the script does no input validation, due to that fact the print ║
║ to file flag and output to terminal flag is automatically enabled to double  ║
║ check your work before possibly totally fucking up your vyos box             ║
║                                                                              ║
║    you'be been warned lol my bash skills may be a bit rusty                  ║
╚══════════════════════════════════════════════════════════════════════════════╝${none}
"
}

function print_example_commands {
  echo -e "${yellow}
╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                 EXAMPLE COMMANDS                                                                 ║
║══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════║
║${none}set service dhcp-server shared-network-name 'LAN' subnet '192.168.0.0/24' static-mapping 'SERVER' ip-address '192.168.0.10'       ${yellow}║
║${none}set service dhcp-server shared-network-name 'LAN' subnet '192.168.0.0/24' static-mapping 'SERVER' mac-address '00:53:00:00:00:01' ${yellow}║
║                                                                                                                                  ║
║${none}set nat destination rule 10 description 'Port Forward: HTTP to 192.168.0.100' ${yellow}                                                    ║
║${none}set nat destination rule 10 destination port '8888'${yellow}                                                                               ║
║${none}set nat destination rule 10 inbound-interface 'eth0' ${yellow}                                                                             ║
║${none}set nat destination rule 10 protocol 'tcp' ${yellow}                                                                                       ║
║${none}set nat destination rule 10 translation address '192.168.0.100' ${yellow}                                                                  ║
║${none}set nat destination rule 10 translation port '22' ${yellow}                                                                                ║
║                                                                                                                                  ║
║${none}set firewall name OUTSIDE-IN rule 20 action 'accept' ${yellow}                                                                             ║
║${none}set firewall name OUTSIDE-IN rule 20 destination address '192.168.0.100' ${yellow}                                                         ║
║${none}set firewall name OUTSIDE-IN rule 20 destination port '22' ${yellow}                                                                       ║
║${none}set firewall name OUTSIDE-IN rule 20 protocol 'tcp' ${yellow}                                                                              ║
║${none}set firewall name OUTSIDE-IN rule 20 state new 'enable' ${yellow}                                                                          ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝${none}
"
}

  #╔══════════════════╗
  #║    STATIC MAP    ║
  #╚══════════════════╝
function map_read_args {
     if [ -z "$STATMAP_NET_NAME" ]; then 
          read -p "Shared Network Name : " STATMAP_NET_NAME
     fi

     if [ -z "$STATMAP_SUB_NAME" ]; then 
          read -p "Subnet (eg. 192.168.0.0/24) : " STATMAP_SUB_NAME
     fi

     if [ -z "$STATMAP_MAP_NAME" ]; then 
          read -p "Static Mapping Name : " STATMAP_MAP_NAME
     fi

     if [ -z "$ADDR_IP" ]; then 
          read -p "Mapping IP (Internal IP you want static) : " ADDR_IP
     fi

     if [ -z "$ADDR_MAC" ]; then 
          read -p "Mapping MAC (Internal host mac address) : " ADDR_MAC
     fi
}

function map_out_file {
     echo "set service dhcp-server shared-network-name '$STATMAP_NET_NAME' subnet '$STATMAP_SUB_NAME' static-mapping '$STATMAP_MAP_NAME' ip-address '$ADDR_IP'" >> $FILE_OUT
     echo "set service dhcp-server shared-network-name '$STATMAP_NET_NAME' subnet '$STATMAP_SUB_NAME' static-mapping '$STATMAP_MAP_NAME' mac-address '$ADDR_MAC'" >> $FILE_OUT
}

function map_out_print {
     echo "set service dhcp-server shared-network-name '$STATMAP_NET_NAME' subnet '$STATMAP_SUB_NAME' static-mapping '$STATMAP_MAP_NAME' ip-address '$ADDR_IP'"
     echo "set service dhcp-server shared-network-name '$STATMAP_NET_NAME' subnet '$STATMAP_SUB_NAME' static-mapping '$STATMAP_MAP_NAME' mac-address '$ADDR_MAC'"
}

function module_map {
     map_read_args

     if [[ $MOD_DRY == 0 ]]; then 
          map_out_print
     elif [[ $MOD_OUT == 0 ]]; then 
          map_out_file
     fi
}

  #╔══════════════════╗
  #║  NAT TRANSLATION ║
  #╚══════════════════╝
function nat_read_args {
     if [ -z "$RULE_NUM" ]; then 
          read -p "NAT Rule Number : " RULE_NUM
     fi

     if [ -z "$RULE_DESC" ]; then 
          read -p "NAT Rule Description : " RULE_DESC
     fi

     if [ -z "$PORT_DEST" ]; then 
          read -p "NAT Destination Port (External Port on FW) : " PORT_DEST
     fi

     if [ -z "$PORT_TRANS" ]; then 
          read -p "Translation Port (Internal Port to FWD to) : " PORT_TRANS
     fi

     if [ -z "$NAT_IFACE" ]; then 
          read -p "External Network Interface : " NAT_IFACE
     fi

     if [ -z "$PROTOCOL" ]; then 
          read -p "Network Protocol  : " PROTOCOL
     fi
}

function nat_out_file {
     echo "set nat destination rule $RULE_NUM description '$RULE_DESC'" >> $FILE_OUT
     echo "set nat destination rule $RULE_NUM destination port '$PORT_DEST'" >> $FILE_OUT
     echo "set nat destination rule $RULE_NUM inbound-interface '$NAT_IFACE'" >>$FILE_OUT
     echo "set nat destination rule $RULE_NUM protocol '$PROTOCOL'" >> $FILE_OUT
     echo "set nat destination rule $RULE_NUM translation address '$ADDR_IP'" >> $FILE_OUT
     echo "set nat destination rule $RULE_NUM translation port '$PORT_TRANS'" >> $FILE_OUT
}

function nat_out_print {
     echo "set nat destination rule $RULE_NUM description '$RULE_DESC'" 
     echo "set nat destination rule $RULE_NUM destination port '$PORT_DEST'" 
     echo "set nat destination rule $RULE_NUM inbound-interface '$NAT_IFACE'" 
     echo "set nat destination rule $RULE_NUM protocol '$PROTOCOL'" 
     echo "set nat destination rule $RULE_NUM translation address '$ADDR_IP'" 
     echo "set nat destination rule $RULE_NUM translation port '$PORT_TRANS'" 
}

function module_nat {
     nat_read_args

     if [[ $MOD_DRY == 0 ]]; then 
          nat_out_print
     elif [[ $MOD_OUT == 0 ]]; then 
          nat_out_file
     fi
}

  #╔══════════════════╗
  #║     FIREWALL     ║
  #╚══════════════════╝
function fw_read_args {
     if [ -z "$FW_NAME" ]; then 
          read -p "External Firewall Name : " FW_NAME
     fi

     if [ -z "$RULE_NUM" ]; then 
          read -p "Firewall Rule Number : " RULE_NUM
     fi

     if [ -z "$PORT_TRANS" ]; then 
          read -p "Translation Port (Internal Port to FWD to) : " PORT_TRANS
     fi

     if [ -z "$PROTOCOL" ]; then 
          read -p "Network Protocol : " PROTOCOL
     fi
}

function fw_out_file {
echo "set firewall name $FW_NAME rule $RULE_NUM action 'accept'" >> $FILE_OUT
echo "set firewall name $FW_NAME rule $RULE_NUM destination address '$ADDR_IP'" >> $FILE_OUT
echo "set firewall name $FW_NAME rule $RULE_NUM destination port '$PORT_TRANS'" >> $FILE_OUT
echo "set firewall name $FW_NAME rule $RULE_NUM protocol '$PROTOCOL'" >> $FILE_OUT
echo "set firewall name $FW_NAME rule $RULE_NUM state new 'enable'" >> $FILE_OUT
}

function fw_out_print {
echo "set firewall name $FW_NAME rule $RULE_NUM action 'accept'" 
echo "set firewall name $FW_NAME rule $RULE_NUM destination address '$ADDR_IP'" 
echo "set firewall name $FW_NAME rule $RULE_NUM destination port '$PORT_TRANS'" 
echo "set firewall name $FW_NAME rule $RULE_NUM protocol '$PROTOCOL'" 
echo "set firewall name $FW_NAME rule $RULE_NUM state new 'enable'" 
}

function module_fw {
     fw_read_args

     if [[ $MOD_DRY == 0 ]]; then 
          fw_out_print
     fi

     if [[ $MOD_OUT == 0 ]]; then 
          fw_out_file
     fi
}


#╔═════════════════════════════════════════════════════════════════════════════╗
#║                         VYATTA CFG GROUP CHECK                              ║
#╚═════════════════════════════════════════════════════════════════════════════╝
# There is a pitfall when working with configuration scripts. It is tempting to 
# call configuration scripts with “sudo” (i.e., temporary root permissions), 
# because that’s the common way on most Linux platforms to call system commands.

# On VyOS this will cause the following problem: After modifying the 
# configuration via script like this once, it is not possible to manually modify 
# the config anymore:

# This will result in the following error message: Set failed If this happens, 
# a reboot is required to be able to edit the config manually again.

# To avoid these problems, the proper way is to call a script with the vyattacfg 
# group, e.g., by using the sg (switch group) command:

#if [ "$(id -g -n)" != 'vyattacfg' ] ; then
#    exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
#fi

#╔═════════════════════════════════════════════════════════════════════════════╗
#║                               PARSE ARGS                                    ║
#╚═════════════════════════════════════════════════════════════════════════════╝
# Check if args are empty
if [ $# -eq 0 ]; then
    script_usage
    exit
fi

#= Options for the flags
OPT_OPTS=":adDfhsnoV-:"

while getopts "$OPT_OPTS" OPTION; do
    case "${OPTION}" in
        -)
            case "${OPTARG}" in
                help ) script_man; exit 0;
                ;;
                version ) script_version; exit 0;
                ;;
                verbose )  FLAG_VERBOSE=true;
                ;;
                debug) MOD_DBG=0; 
                ;;
                dry-run) MOD_DRY=0;
                ;;
                all) MOD_FW=0; MOD_STAT=0; MOD_NAT=0;
                ;;
                firewall) MOD_FW=0;
                ;;
                static-map) MOD_STAT=0;
                ;;
                nat-translation) MOD_NAT=0;
                ;;
                output ) MOD_OUT=0;
                ;;
                *)  error "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
                    OPT_ERR=1
                ;;
            esac
        ;;
        h ) script_man; exit 0;
        ;;
        V ) script_version; exit 0;
        ;;
        D ) MOD_DBG=0; 
        ;;
        d ) MOD_DRY=0; 
        ;;
        a ) MOD_FW=0; MOD_STAT=0; MOD_NAT=0;
        ;;
        d ) MOD_DRY=0;
        ;;
        f ) MOD_FW=0;
        ;;
        s ) MOD_STAT=0;
        ;;
        n ) MOD_NAT=0;
        ;;
        o ) MOD_OUT=0; FILE_OUT=$2;
        ;;
        : ) echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            OPT_ERR=1; exit 1;
        ;;
        ? ) echo "${SCRIPT_NAME}: -$OPTARG: unknown option"
            OPT_ERR=1; exit 1;
        ;;
        *)  echo "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
            OPT_ERR=1; exit 1;
        ;;
    esac
done
shift $((${OPTIND} - 1)) ## shift options

print_warning

if [[ $MOD_DBG == 0 ]]; then 
     module_print_flags
fi

if [[ $MOD_EX == 0 ]]; then 
     print_example_commands
fi

# static mapping module
if [[ $MOD_STAT == 0 ]]; then 
     module_map
fi

# nat module
if [[ $MOD_NAT == 0 ]]; then 
     module_nat
fi

# firewall module
if [[ $MOD_FW == 0 ]]; then 
     module_fw
fi

exit

#source /opt/vyatta/etc/functions/script-template
#configure




